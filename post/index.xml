<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My New Hugo Site</title>
    <link>http://sflaqiu.github.io/post/</link>
    <description>Recent content in Posts on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jan 2022 08:00:00 +0800</lastBuildDate><atom:link href="http://sflaqiu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>今天你设计了吗？</title>
      <link>http://sflaqiu.github.io/post/first/</link>
      <pubDate>Sat, 01 Jan 2022 08:00:00 +0800</pubDate>
      
      <guid>http://sflaqiu.github.io/post/first/</guid>
      <description>背景 在开发过程中你是否有遇到过这样的苦恼？产品发来一个需求，没做过，但是看完需求感觉应该处理起来很简单，然后找到对应的业务代码，发现代码像打乱的毛线一样理不清楚，各种逻辑嵌套，各种特殊判断处理，想要拓展维护个内容却无从下手，一边看着代码，一边用手拨动着本就为数不多的秀发，然后口吐芬芳 。 有没发现一个问题，为什么业务不复杂，但是随着产品迭代，经过不断拓展和维护，慢慢的代码就越做越乱，你可以说产品想法天马星空，人员流动大，多人参与慢慢的就被做乱了，这可能是个不错的借口，但是其中本质的问题还是前期思考的太少，没有进行合理的抽象设计，没有去前瞻性的去预埋一些未来可拓展性的内容，所以最终导致了后来的局面。
经常听到有经验的开发者说开发前多思考，不要一拿到需求就习惯性的一顿操作，反手就定义一个function根据需求逻辑一条龙写到底。
所以面对相对复杂的需求我们需要进行抽象思考，尽可能做到设计出来的东西是解决一类问题，而不是单单解决当前问题，然后在代码实现上也要面向抽象开发，这样才能做到真正的高质量代码，可维护性和可拓展性高，才能沉淀出可复用，健壮性强的系统。
那么我们要如何去抽象呢？面对需求的抽象思维这个需要平时多锻炼，拿到需求多想多思考，不要急于求成，主要围绕着这几大要素：可维护性、可拓展性、可复用性，安全性去设计解决方案，至于代码上的抽象就可以使用下面的方式。
不卖关子了，是时候请出今天的主角：《设计模式》，简单的说设计模式就是开发者们的经验沉淀，通过学习设计模式并在业务开发过程中加以使用，可以让代码的实现更容易拓展和维护，提高整体代码质量，也可以作为开发之间沟通的专业术语，提到某个模式，可以马上get到代码设计，减少沟通的成本。
 这里就不一一介绍23种设计模式和设计模式的6个原则，可以google回顾下
  推荐：学习设计模式地址
 下面就将结合当前项目的bad case，手把手的使用设计模式进行重构，其中会用到多种设计模式的使用，并且体现了设计模式的中的几个原则，做好准备，发车了。
举例 需求背景概要：
APP首页功能，用模块化的方式去管理配置，后台可以配置模块标识和模块排序，展示条件等，首页API接口获取当前用户的模块列表，并构造模块数据展示。
API Response Data
 伪响应数据，忽略掉不重要或者重复的数据
 { &amp;#34;code&amp;#34;: 0, &amp;#34;data&amp;#34;: { &amp;#34;tools&amp;#34;: { // -- 模块信息 -- &amp;#34;id&amp;#34;: 744, &amp;#34;icon&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;sub_title&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;module&amp;#34;: &amp;#34;lm_tools&amp;#34;, &amp;#34;sort&amp;#34;: 1, &amp;#34;is_lock&amp;#34;: true, &amp;#34;is_show&amp;#34;: true, &amp;#34;more_text&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;more_uri&amp;#34;: &amp;#34;xxx:///tools/more&amp;#34;, &amp;#34;list&amp;#34;: [ // -- 模块展示数据 -- ] }, &amp;#34;my_baby&amp;#34;: { // ... ... }, &amp;#34;knowledge_parenting&amp;#34;: { // .</description>
    </item>
    
  </channel>
</rss>
